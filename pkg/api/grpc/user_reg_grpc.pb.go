// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: grpc/user_reg.proto

package go_testing_authservice

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UserWorker_RegisterUser_FullMethodName = "/testuserapi.UserWorker/RegisterUser"
	UserWorker_Login_FullMethodName        = "/testuserapi.UserWorker/Login"
	UserWorker_CheckToken_FullMethodName   = "/testuserapi.UserWorker/CheckToken"
	UserWorker_RefreshToken_FullMethodName = "/testuserapi.UserWorker/RefreshToken"
)

// UserWorkerClient is the client API for UserWorker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserWorkerClient interface {
	RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*GeneralReply, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*AuthTokenReply, error)
	CheckToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*GeneralReply, error)
	RefreshToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*AuthTokenReply, error)
}

type userWorkerClient struct {
	cc grpc.ClientConnInterface
}

func NewUserWorkerClient(cc grpc.ClientConnInterface) UserWorkerClient {
	return &userWorkerClient{cc}
}

func (c *userWorkerClient) RegisterUser(ctx context.Context, in *RegisterUserRequest, opts ...grpc.CallOption) (*GeneralReply, error) {
	out := new(GeneralReply)
	err := c.cc.Invoke(ctx, UserWorker_RegisterUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWorkerClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*AuthTokenReply, error) {
	out := new(AuthTokenReply)
	err := c.cc.Invoke(ctx, UserWorker_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWorkerClient) CheckToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*GeneralReply, error) {
	out := new(GeneralReply)
	err := c.cc.Invoke(ctx, UserWorker_CheckToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userWorkerClient) RefreshToken(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*AuthTokenReply, error) {
	out := new(AuthTokenReply)
	err := c.cc.Invoke(ctx, UserWorker_RefreshToken_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserWorkerServer is the server API for UserWorker service.
// All implementations should embed UnimplementedUserWorkerServer
// for forward compatibility
type UserWorkerServer interface {
	RegisterUser(context.Context, *RegisterUserRequest) (*GeneralReply, error)
	Login(context.Context, *LoginRequest) (*AuthTokenReply, error)
	CheckToken(context.Context, *TokenRequest) (*GeneralReply, error)
	RefreshToken(context.Context, *TokenRequest) (*AuthTokenReply, error)
}

// UnimplementedUserWorkerServer should be embedded to have forward compatible implementations.
type UnimplementedUserWorkerServer struct {
}

func (UnimplementedUserWorkerServer) RegisterUser(context.Context, *RegisterUserRequest) (*GeneralReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedUserWorkerServer) Login(context.Context, *LoginRequest) (*AuthTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedUserWorkerServer) CheckToken(context.Context, *TokenRequest) (*GeneralReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckToken not implemented")
}
func (UnimplementedUserWorkerServer) RefreshToken(context.Context, *TokenRequest) (*AuthTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshToken not implemented")
}

// UnsafeUserWorkerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserWorkerServer will
// result in compilation errors.
type UnsafeUserWorkerServer interface {
	mustEmbedUnimplementedUserWorkerServer()
}

func RegisterUserWorkerServer(s grpc.ServiceRegistrar, srv UserWorkerServer) {
	s.RegisterService(&UserWorker_ServiceDesc, srv)
}

func _UserWorker_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWorkerServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserWorker_RegisterUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWorkerServer).RegisterUser(ctx, req.(*RegisterUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWorker_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWorkerServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserWorker_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWorkerServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWorker_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWorkerServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserWorker_CheckToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWorkerServer).CheckToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserWorker_RefreshToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserWorkerServer).RefreshToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserWorker_RefreshToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserWorkerServer).RefreshToken(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserWorker_ServiceDesc is the grpc.ServiceDesc for UserWorker service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserWorker_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "testuserapi.UserWorker",
	HandlerType: (*UserWorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterUser",
			Handler:    _UserWorker_RegisterUser_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _UserWorker_Login_Handler,
		},
		{
			MethodName: "CheckToken",
			Handler:    _UserWorker_CheckToken_Handler,
		},
		{
			MethodName: "RefreshToken",
			Handler:    _UserWorker_RefreshToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "grpc/user_reg.proto",
}
